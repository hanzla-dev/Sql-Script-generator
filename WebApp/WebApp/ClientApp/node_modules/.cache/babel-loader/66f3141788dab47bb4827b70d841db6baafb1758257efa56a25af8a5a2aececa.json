{"ast":null,"code":"// TODO: This module should be ElementChildren, and should use named exports.\n\nimport React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid components\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for func.\n * @return {object} Object containing the ordered map of results.\n */\nfunction map(children, func, context) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n    return func.call(context, child, index++);\n  });\n}\n\n/**\n * Iterates through children that are \"valid components\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for context.\n */\nfunction forEach(children, func, context) {\n  var index = 0;\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n    func.call(context, child, index++);\n  });\n}\n\n/**\n * Count the number of \"valid components\" in the Children container.\n *\n * @param {?*} children Children tree container.\n * @returns {number}\n */\nfunction count(children) {\n  var result = 0;\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n    ++result;\n  });\n  return result;\n}\n\n/**\n * Finds children that are typically specified as `props.children`,\n * but only iterates over children that are \"valid components\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for func.\n * @returns {array} of children that meet the func return statement\n */\nfunction filter(children, func, context) {\n  var index = 0;\n  var result = [];\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n    if (func.call(context, child, index++)) {\n      result.push(child);\n    }\n  });\n  return result;\n}\nfunction find(children, func, context) {\n  var index = 0;\n  var result = void 0;\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n    if (func.call(context, child, index++)) {\n      result = child;\n    }\n  });\n  return result;\n}\nfunction every(children, func, context) {\n  var index = 0;\n  var result = true;\n  React.Children.forEach(children, function (child) {\n    if (!result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n    if (!func.call(context, child, index++)) {\n      result = false;\n    }\n  });\n  return result;\n}\nfunction some(children, func, context) {\n  var index = 0;\n  var result = false;\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n    if (func.call(context, child, index++)) {\n      result = true;\n    }\n  });\n  return result;\n}\nfunction toArray(children) {\n  var result = [];\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n    result.push(child);\n  });\n  return result;\n}\nexport default {\n  map: map,\n  forEach: forEach,\n  count: count,\n  find: find,\n  filter: filter,\n  every: every,\n  some: some,\n  toArray: toArray\n};","map":{"version":3,"names":["React","map","children","func","context","index","Children","child","isValidElement","call","forEach","count","result","filter","push","find","every","some","toArray"],"sources":["F:/Software Engineering/Web development/xampp/htdocs/Sql-Script-generator/WebApp/WebApp/ClientApp/node_modules/react-bootstrap/es/utils/ValidComponentChildren.js"],"sourcesContent":["// TODO: This module should be ElementChildren, and should use named exports.\n\nimport React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid components\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for func.\n * @return {object} Object containing the ordered map of results.\n */\nfunction map(children, func, context) {\n  var index = 0;\n\n  return React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n\n    return func.call(context, child, index++);\n  });\n}\n\n/**\n * Iterates through children that are \"valid components\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for context.\n */\nfunction forEach(children, func, context) {\n  var index = 0;\n\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    func.call(context, child, index++);\n  });\n}\n\n/**\n * Count the number of \"valid components\" in the Children container.\n *\n * @param {?*} children Children tree container.\n * @returns {number}\n */\nfunction count(children) {\n  var result = 0;\n\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    ++result;\n  });\n\n  return result;\n}\n\n/**\n * Finds children that are typically specified as `props.children`,\n * but only iterates over children that are \"valid components\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func.\n * @param {*} context Context for func.\n * @returns {array} of children that meet the func return statement\n */\nfunction filter(children, func, context) {\n  var index = 0;\n  var result = [];\n\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result.push(child);\n    }\n  });\n\n  return result;\n}\n\nfunction find(children, func, context) {\n  var index = 0;\n  var result = void 0;\n\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result = child;\n    }\n  });\n\n  return result;\n}\n\nfunction every(children, func, context) {\n  var index = 0;\n  var result = true;\n\n  React.Children.forEach(children, function (child) {\n    if (!result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (!func.call(context, child, index++)) {\n      result = false;\n    }\n  });\n\n  return result;\n}\n\nfunction some(children, func, context) {\n  var index = 0;\n  var result = false;\n\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (func.call(context, child, index++)) {\n      result = true;\n    }\n  });\n\n  return result;\n}\n\nfunction toArray(children) {\n  var result = [];\n\n  React.Children.forEach(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    result.push(child);\n  });\n\n  return result;\n}\n\nexport default {\n  map: map,\n  forEach: forEach,\n  count: count,\n  find: find,\n  filter: filter,\n  every: every,\n  some: some,\n  toArray: toArray\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}